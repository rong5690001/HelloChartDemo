package com.rong.map.recyclerviewitemtouchhelper;

import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.util.AxisAutoValues;
import lecho.lib.hellocharts.view.LineChartView;

public class ChartActivity extends AppCompatActivity {

    private LineChartView mChart;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chart);
        initView();
        setData();
    }

    private void initView() {
        mChart = (LineChartView) findViewById(R.id.chart);
//        mChart.setInteractive(false);
        mChart.setZoomEnabled(true);
        mChart.setMaxZoom(1.5f);
        mChart.setScrollEnabled(true);
        mChart.setValueSelectionEnabled(true);
        Viewport v = new Viewport(mChart.getMaximumViewport());
        v.left = 0;
        v.right= 1;
        mChart.setMaximumViewport(v);
        mChart.setCurrentViewport(v);
        mChart.startDataAnimation();
    }

    private void setData() {
        List<PointValue> values = new ArrayList<PointValue>();
        values.add(new PointValue(0f, 48.1f));
        values.add(new PointValue(1f, 49.3f));
        values.add(new PointValue(2f, 48.3f));
        values.add(new PointValue(3f, 47.1f));
        values.add(new PointValue(4f, 48.1f));
        values.add(new PointValue(5f, 46.1f));
        values.add(new PointValue(6f, 45.1f));
        values.add(new PointValue(7f, 46.1f));
        values.add(new PointValue(8f, 48.1f));
        values.add(new PointValue(9f, 45.1f));
        values.add(new PointValue(10f, 46.1f));
        values.add(new PointValue(11f, 49.1f));
        values.add(new PointValue(12f, 48.1f));
        values.add(new PointValue(13f, 49.3f));
        values.add(new PointValue(14f, 48.3f));
        values.add(new PointValue(15f, 47.1f));
        values.add(new PointValue(16f, 48.1f));
        values.add(new PointValue(17f, 46.1f));
        values.add(new PointValue(18f, 45.1f));
        values.add(new PointValue(19f, 46.1f));
        values.add(new PointValue(20f, 48.1f));
        values.add(new PointValue(21f, 45.1f));
        values.add(new PointValue(22f, 46.1f));
        values.add(new PointValue(23f, 49.1f));

        //In most cased you can call data model methods in builder-pattern-like manner.
        Line line = new Line(values).setColor(Color.parseColor("#f9c614")).setCubic(true);
        line.setFilled(true);//区域填充
        line.setPointRadius(3);
//        line.setHasGradientToTransparent();//渐变
        line.setPointColor(Color.parseColor("#f9c614"));
//        line.setPathEffect();
        line.setStrokeWidth(2);
        List<Line> lines = new ArrayList<>();
        lines.add(line);

        LineChartData data = new LineChartData();
//        data.setBaseValue(48);
        data.setLines(lines);

        List<Float> axisValues = new ArrayList<>();
        axisValues.add(0f);
        axisValues.add(1f);
        axisValues.add(2f);
        axisValues.add(3f);
        axisValues.add(4f);
        axisValues.add(5f);
        axisValues.add(6f);
        axisValues.add(7f);
        List<String> axisValuesLabels = new ArrayList<>();
        axisValuesLabels.add("2/5");
        axisValuesLabels.add("3/30");
        axisValuesLabels.add("4/5");
        axisValuesLabels.add("5/5");
        axisValuesLabels.add("6/5");
        axisValuesLabels.add("7/5");
        axisValuesLabels.add("8/5");
        axisValuesLabels.add("9/5");
        List<AxisValue> axisAutoValues = new ArrayList<>();
        for (int i = 0; i < axisValues.size(); i++) {
            AxisValue axisValue = new AxisValue(i);
            axisValue.setLabel(axisValuesLabels.get(i));
            axisAutoValues.add(axisValue);
        }
//        Axis axisBottom = Axis.generateAxisFromCollection(axisValues, axisValuesLabels);
        Axis axisBottom = new Axis();
        axisBottom.setValues(axisAutoValues);
//        axisBottom.setAutoGenerated(true);
//        axisBottom.setLineColor(Color.parseColor("#d8d8d8"));
        axisBottom.setMaxLabelChars(7);
//        axisBottom.setHasTiltedLabels(true);
//        axisBottom.setHasLines(true);
//        axisBottom.setHasTiltedLabels(true);
        axisBottom.setLineColor(Color.parseColor("#e7e7e7"));
        data.setAxisXBottom(axisBottom);
        Axis axisLeft = Axis.generateAxisFromRange(40f, 51f, 1f);
//        axisLeft.setAutoGenerated(true);
//        List<AxisValue> axisValuesLeft = new ArrayList<>();
//        axisValuesLeft.add(new AxisValue(0f));
//        axisValuesLeft.add(new AxisValue(48f));
//        axisValuesLeft.add(new AxisValue(49f));
//        axisValuesLeft.add(new AxisValue(50f));
//        axisLeft.setValues(axisValuesLeft);
        axisLeft.setHasLines(true);
        data.setAxisYLeft(axisLeft);

//        LineChartView chart = new LineChartView(this);
//        mChart.startDataAnimation(2000);
        mChart.setLineChartData(data);
//        mChart.setValueTouchEnabled(false);
    }
}
